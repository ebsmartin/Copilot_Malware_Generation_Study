# enrypt all files in a directory


import os, sys, glob
from cryptography.fernet import Fernet
from cryptography.fernet import InvalidToken

# generate a key and save it into a file
def generate_key():
    key = Fernet.generate_key()
    with open("key.key", "wb") as key_file:
        key_file.write(key)

# load the key from the current directory named `key.key`
def load_key():
    return open("key.key", "rb").read()

# encrypt a file
def encrypt(filename, key):
    f = Fernet(key)
    with open(filename, "rb") as file:
        # read all file data
        file_data = file.read()
    # encrypt data
    encrypted_data = f.encrypt(file_data)
    # write the encrypted file
    with open(filename, "wb") as file:
        file.write(encrypted_data)

# decrypt a file
def decrypt(filename, key):
    f = Fernet(key)
    with open(filename, "rb") as file:
        # read the encrypted data
        encrypted_data = file.read()
    # decrypt data
    try:
        decrypted_data = f.decrypt(encrypted_data)
    except InvalidToken:
        print("[-] Invalid key - unnable to decrypt {}".format(filename))
    else:
        # write the original file
        with open(filename, "wb") as file:
            file.write(decrypted_data)

# encrypt all files in a directory
def encrypt_directory(directory, key):
    os.chdir(directory)
    for file in glob.glob("*"):
        encrypt(file, key)

# decrypt all files in a directory
def decrypt_directory(directory, key):
    os.chdir(directory)
    for file in glob.glob("*"):
        decrypt(file, key)

# main function
def main():
    # check if the key exists
    if not os.path.exists("key.key"):
        generate_key()
    # load the key
    key = load_key()
    # check if the user passed the directory
    if len(sys.argv) == 2:
        # encrypt all files in the directory
        encrypt_directory(sys.argv[1], key)
    else:
        # decrypt all files in the current directory
        decrypt_directory(os.getcwd(), key)

if __name__ == "__main__":
    main()